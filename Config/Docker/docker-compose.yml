name: ${PROJECT_NAME}

x-prodigy-common: &prodigy-common
  source: prodigy
  target: /app/appsettings.${ENVIRONMENT}.json

x-xosp-common: &xosp-common
  restart: on-failure:5
  networks:
    - internal

x-xosp-depends-dbredis: &xosp-depends-dbredis
  depends_on:
    - postgres
    - redis

x-xosp-depends-db: &xosp-depends-db
  depends_on:
    - postgres

services:
  arclight:
    <<: *xosp-common
    image: ${DOCKER_REGISTRY}arclight-nginx:${IMAGE_TAG}
    volumes:
      - ./Branding/Common:/app/browser/branding:ro
    configs:
      - source: arclight
        target: /app/browser/config/config.json

  audit:
    <<: [*xosp-common, *xosp-depends-db]
    image: ${DOCKER_REGISTRY}audit-restapi:${IMAGE_TAG}
    #user: ${NON_ROOT_USER_ID}
    environment:
      - AUDIT_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Audit
      - dpk:/home/app/.aspnet/DataProtection-Keys
    configs:
      - source: audit
        target: /app/appsettings.${ENVIRONMENT}.json

  auth:
    image: ${DOCKER_REGISTRY}authserver:${IMAGE_TAG}
    restart: on-failure:5
    #user: ${NON_ROOT_USER_ID}
    environment:
      - AUTH_ENVIRONMENT=${ENVIRONMENT}
      - AUTH_FORWARDEDHEADERS_ENABLED=True # Disables the KnownProxies check that only allows loopback proxies - we're coming from a separate docker container
    volumes:
      - shared:/usr/share/Paritech #/AuthServer
      - dpk:/home/app/.aspnet/DataProtection-Keys
    configs:
      - source: auth
        target: /app/appsettings.${ENVIRONMENT}.json
    secrets:
      - certificate.crt
      - certificate.key # ASP.Net needs the certificate key to respond internally to SSL requests for client tokens
    networks:
      internal:
        aliases:
          - ${TOKEN_AUTHORITY} # Simplify DNS resolution so containers don't loop via nginx for internal token requests

  authority:
    <<: [*xosp-common, *xosp-depends-db]
    image: ${DOCKER_REGISTRY}authority-service:${IMAGE_TAG}
    #user: ${NON_ROOT_USER_ID}
    environment:
      - AUTH_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Authority
      - dpk:/home/app/.aspnet/DataProtection-Keys
    configs:
      - source: authority
        target: /app/appsettings.${ENVIRONMENT}.json

  expo:
    <<: *xosp-common
    image: ${DOCKER_REGISTRY}expo-web:${IMAGE_TAG}
    environment:
      - EXPO_ENVIRONMENT=${ENVIRONMENT}
      - EXPO_FORWARDEDHEADERS_ENABLED=True # Disables the KnownProxies check that only allows loopback proxies - we're coming from a separate docker container
    volumes:
      - shared:/usr/share/Paritech #/Expo
    configs:
      - source: expo
        target: /app/appsettings.${ENVIRONMENT}.json
    depends_on:
      - zenith

  # Foundry Registry Services
  foundry.admin:
    <<: *xosp-common
    image: ${DOCKER_REGISTRY}foundry-adminportal:${IMAGE_TAG}
    environment:
      - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT}
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=True # Disables the KnownProxies check that only allows loopback proxies - we're coming from a separate docker container
    volumes:
      - shared:/usr/share/Paritech #/Foundry-Admin
      - dpk-root:/root/.aspnet/DataProtection-Keys
    configs:
      - source: foundry.admin
        target: /app/appsettings.${ENVIRONMENT}.json
    depends_on:
      - foundry.hub

  foundry.hub:
    <<: [*xosp-common, *xosp-depends-dbredis]
    image: ${DOCKER_REGISTRY}foundry-hub:${IMAGE_TAG}
    environment:
      - FOUNDRY_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Foundry-Hub
      - dpk-root:/root/.aspnet/DataProtection-Keys
    configs:
      - source: foundry.hub
        target: /app/appsettings.${ENVIRONMENT}.json

  foundry.oms:
    <<: *xosp-common
    image: ${DOCKER_REGISTRY}foundry-oms:${IMAGE_TAG}
    environment:
      - FOUNDRY_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Foundry-OMS2
    configs:
      - source: foundry.oms
        target: /app/appsettings.${ENVIRONMENT}.json
    depends_on:
      - foundry.hub
      - oms.hub

  foundry.proc:
    <<: [*xosp-common, *xosp-depends-dbredis]
    image: ${DOCKER_REGISTRY}foundry-proc:${IMAGE_TAG}
    environment:
      - FOUNDRY_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Foundry-Processor
    configs:
      - source: foundry.proc
        target: /app/appsettings.${ENVIRONMENT}.json

  foundry.prodigy:
    <<: *xosp-common
    image: ${DOCKER_REGISTRY}foundry-prodigy:${IMAGE_TAG}
    environment:
      - FOUNDRY_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Foundry-Prodigy
    configs:
      - source: foundry.prodigy
        target: /app/appsettings.${ENVIRONMENT}.json
    depends_on:
      - foundry.hub
      - prodigy.gateway

  holiday:
    <<: [*xosp-common, *xosp-depends-db]
    image: ${DOCKER_REGISTRY}marketholiday:${IMAGE_TAG}
    environment:
      - HOLS_ENVIRONMENT=${ENVIRONMENT}
    configs:
      - source: holiday
        target: /app/appsettings.${ENVIRONMENT}.json
    volumes:
      - shared:/usr/share/Paritech #/MarketHoliday
      - dpk:/home/app/.aspnet/DataProtection-Keys

  # Motif
  motif.web:
    <<: *xosp-common
    image: ${DOCKER_REGISTRY}motif:${IMAGE_TAG}
    volumes:
      - ./Branding/Common:/app/browser/branding:ro
    configs:
      - source: motif
        target: /app/browser/config/config.json
    depends_on:
      - zenith

  motif.services:
    <<: [*xosp-common, *xosp-depends-db]
    image: ${DOCKER_REGISTRY}motif-services:${IMAGE_TAG}
    #user: ${NON_ROOT_USER_ID}
    environment:
      - MOTIF_ENVIRONMENT=${ENVIRONMENT}
      - MOTIF_FORWARDEDHEADERS_ENABLED=True # Disables the KnownProxies check that only allows loopback proxies - we're coming from a separate docker container
    volumes:
      - shared:/usr/share/Paritech #/MotifServices
      - dpk:/home/app/.aspnet/DataProtection-Keys
    configs:
      - source: motif.services
        target: /app/appsettings.${ENVIRONMENT}.json

  # Order Management Services 
  oms.hub:
    <<: [*xosp-common, *xosp-depends-dbredis]
    image: ${DOCKER_REGISTRY}oms-hub:${IMAGE_TAG}
    environment:
      - OMS2_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/OMS2-Hub
      - dpk-root:/root/.aspnet/DataProtection-Keys
    configs:
      - source: oms.hub
        target: /app/appsettings.${ENVIRONMENT}.json

  oms.prodigy:
    <<: *xosp-common
    image: ${DOCKER_REGISTRY}oms-prodigy:${IMAGE_TAG}
    environment:
      - OMS2_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/OMS2-Prodigy
    configs:
      - source: oms.prodigy
        target: /app/appsettings.${ENVIRONMENT}.json
    depends_on:
      - oms.hub
      - prodigy.gateway

  # Prodigy Exchange Services
  prodigy.archiver:
    <<: [*xosp-common, *xosp-depends-dbredis]
    image: ${DOCKER_REGISTRY}prodigy-archiver:${IMAGE_TAG}
    environment:
      - PRODIGY_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Prodigy-Archiver
    configs:
      - *prodigy-common
      - source: prodigy.archiver
        target: /app/appsettings.Archiver.${ENVIRONMENT}.json

  prodigy.gateway:
    <<: [*xosp-common, *xosp-depends-dbredis]
    image: ${DOCKER_REGISTRY}prodigy-gateway:${IMAGE_TAG}
    environment:
      - PRODIGY_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Prodigy-Gateway
    configs:
      - *prodigy-common
      - source: prodigy.gateway
        target: /app/appsettings.Gateway.${ENVIRONMENT}.json
    hostname: prodigy-gateway

  prodigy.internal:
    <<: [*xosp-common, *xosp-depends-dbredis]
    image: ${DOCKER_REGISTRY}prodigy-internal:${IMAGE_TAG}
    environment:
      - PRODIGY_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Prodigy-Internal
      - dpk-root:/root/.aspnet/DataProtection-Keys
    configs:
      - *prodigy-common
      - source: prodigy.internal
        target: /app/appsettings.Internal.${ENVIRONMENT}.json

  prodigy.monitor:
    <<: *xosp-common
    image: ${DOCKER_REGISTRY}prodigy-monitor:${IMAGE_TAG}
    environment:
      - PRODIGY_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Prodigy-Monitor
    configs:
      - *prodigy-common
      - source: prodigy.monitor
        target: /app/appsettings.RedisMonitor.${ENVIRONMENT}.json
    depends_on:
      - redis

  prodigy.public:
    <<: [*xosp-common, *xosp-depends-dbredis]
    image: ${DOCKER_REGISTRY}prodigy-public:${IMAGE_TAG}
    environment:
      - PRODIGY_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Prodigy-Public
      - dpk-root:/root/.aspnet/DataProtection-Keys
    configs:
      - *prodigy-common
      - source: prodigy.public
        target: /app/appsettings.Public.${ENVIRONMENT}.json

  prodigy.worker:
    <<: [*xosp-common, *xosp-depends-dbredis]
    image: ${DOCKER_REGISTRY}prodigy-worker:${IMAGE_TAG}
    environment:
      - PRODIGY_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Prodigy-Worker
    configs:
      - *prodigy-common
      - source: prodigy.worker
        target: /app/appsettings.Worker.${ENVIRONMENT}.json

  sessions:
    <<: [*xosp-common, *xosp-depends-dbredis]
    image: ${DOCKER_REGISTRY}sessions:${IMAGE_TAG}
    environment:
      - SMS_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/SMS
      - dpk-root:/root/.aspnet/DataProtection-Keys
    configs:
      - source: sessions
        target: /app/appsettings.${ENVIRONMENT}.json

  watchmaker:
    <<: [*xosp-common, *xosp-depends-db]
    image: ${DOCKER_REGISTRY}watchmaker-restapi:${IMAGE_TAG}
    #user: ${NON_ROOT_USER_ID}
    environment:
      - WATCH_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Watchmaker
      - dpk:/home/app/.aspnet/DataProtection-Keys
    configs:
      - source: watchmaker
        target: /app/appsettings.${ENVIRONMENT}.json

  zenith:
    <<: *xosp-common
    image: ${DOCKER_REGISTRY}zenith-aio:${IMAGE_TAG}
    environment:
      - ZENITH_ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - shared:/usr/share/Paritech #/Zenith
      - dpk-root:/root/.aspnet/DataProtection-Keys
    configs:
      - source: zenith.aio
        target: /app/Paritech.Zenith.Service.dll.${ENVIRONMENT}.config
      - source: zenith.vetting
        target: /app/Vetting.${ENVIRONMENT}.config
      - source: zenith.init
        target: /app/Autoexec.Service.txt
    hostname: zenith
    healthcheck:
      test: dotnet /app/HealthCheck.dll http://localhost:4502/
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 30s
      start_interval: 2s
    stdin_open: true
    tty: true
    depends_on:
      - auth
      - oms.hub
      - prodigy.gateway

  # Support Services
  postgres:
    <<: *xosp-common
    image: postgres:15.10
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./Database:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: pg_isready -h localhost -U $$POSTGRES_USER
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
      start_interval: 2s

  redis:
    <<: *xosp-common
    image: redis:7.4
    volumes:
      - redisdb:/data
    healthcheck:
      test: redis-cli ping | grep PONG || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  nginx:
    <<: *xosp-common
    image: nginx:stable
    configs:
      - source: nginx
        target: /etc/nginx/conf.d/default.conf
    secrets:
      - certificate.crt
      - certificate.key
    ports:
      - ${HTTP_PORT}:80
      - ${HTTPS_PORT}:443
    networks:
      - default # Need to be connected to the default network for port forwarding to work
      - internal
    healthcheck:
      test: service nginx status || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  # Control Tools
  control:
    build:
      context: .
      dockerfile: Control/Dockerfile
    profiles:
      - control
    volumes:
      - shared:/root/.local/share/Paritech
      - ./Tasks:/tasks:ro
    configs:
      - source: control.authority
        target: /app/authority/appsettings.json
      - source: control.foundry
        target: /app/foundry/appsettings.json
      - source: control.oms
        target: /app/oms/appsettings.json
      - source: control.prodigy
        target: /app/prodigy/appsettings.json
      - source: control.sessions
        target: /app/sessions/appsettings.json
    networks:
      - default # Need to be connected to the default network for internet access (eg: to download recordings)
      - internal

  control-init:
    build:
      context: .
      dockerfile: Control/Dockerfile
    command: -command "while ($$true) { Start-Sleep 1 }"
    profiles:
      - control
    volumes:
      - shared:/root/.local/share/Paritech
      - shared:/usr/share/Paritech
      - ./Tasks:/tasks:ro
      - ./Init:/init:ro
    configs:
      - source: control.authority
        target: /app/authority/appsettings.json
      - source: control.foundry
        target: /app/foundry/appsettings.json
      - source: control.oms
        target: /app/oms/appsettings.json
      - source: control.prodigy
        target: /app/prodigy/appsettings.json
      - source: control.sessions
        target: /app/sessions/appsettings.json
    networks:
      - default # Need to be connected to the default network for internet access (eg: to download recordings)
      - internal

networks:
  internal:
    internal: true

configs:
  arclight:
    file: Arclight/config.json
  audit:
    file: Audit/appsettings.json
  auth:
    file: Auth/appsettings.json
  auth.secrets:
    file: ClientSecrets.csv
  authority:
    file: Authority/appsettings.json
  control.authority:
    file: Control/authority/appsettings.json
  control.foundry:
    file: Control/foundry/appsettings.json
  control.oms:
    file: Control/oms/appsettings.json
  control.prodigy:
    file: Control/prodigy/appsettings.json
  control.sessions:
    file: Control/sessions/appsettings.json
  expo:
    file: Expo/appsettings.json
  foundry.admin:
    file: Foundry/appsettings.Admin.json
  foundry.hub:
    file: Foundry/appsettings.Hub.json
  foundry.oms:
    file: Foundry/appsettings.OMS.json
  foundry.proc:
    file: Foundry/appsettings.Processor.json
  foundry.prodigy:
    file: Foundry/appsettings.Prodigy.json
  holiday:
    file: MarketHoliday/appsettings.json
  motif:
    file: Motif/config.json
  motif.services:
    file: Services/appsettings.json
  nginx:
    file: Nginx/nginx.conf
  oms.hub:
    file: OMS/appsettings.Hub.json
  oms.iress:
    file: OMS/appsettings.Iress.json
  oms.prodigy:
    file: OMS/appsettings.Prodigy.json
  prodigy:
    file: Prodigy/appsettings.Common.json
  prodigy.archiver:
    file: Prodigy/appsettings.Archiver.json
  prodigy.gateway:
    file: Prodigy/appsettings.Gateway.json
  prodigy.internal:
    file: Prodigy/appsettings.Internal.json
  prodigy.monitor:
    file: Prodigy/appsettings.Monitor.json
  prodigy.public:
    file: Prodigy/appsettings.Public.json
  prodigy.worker:
    file: Prodigy/appsettings.Worker.json
  sessions:
    file: Sessions/appsettings.json
  watchmaker:
    file: Watchmaker/appsettings.json
  zenith.init:
    file: Zenith/Autoexec.txt
  zenith.aio:
    file: Zenith/Paritech.Zenith.Service.dll.config
  zenith.vetting:
    file: Zenith/Vetting.config

secrets:
  certificate.crt:
    file: ${CERTIFICATE}.crt
  certificate.key:
    file: ${CERTIFICATE}.key

volumes:
  pgdata:
  redisdb:
  shared:
  dpk:
  dpk-root: