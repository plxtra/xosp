BEGIN TRANSACTION;
CREATE SCHEMA IF NOT EXISTS herald;

CREATE TABLE IF NOT EXISTS herald.Application (
	 ApplicationID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL

	,Name TEXT NOT NULL

	,CONSTRAINT PkApplication PRIMARY KEY (ApplicationID)
);

CREATE UNIQUE INDEX IF NOT EXISTS UqApplicationName ON herald.Application (Name);

CREATE TABLE IF NOT EXISTS herald.Category (
	 CategoryID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL
	
	,ApplicationID INTEGER NOT NULL

	,Name TEXT NOT NULL
	,Description TEXT

	,CONSTRAINT PkCategory PRIMARY KEY (CategoryID)
);

CREATE UNIQUE INDEX IF NOT EXISTS UqCategoryApplicationName ON herald.Category (ApplicationID, Name);

CREATE TABLE IF NOT EXISTS herald.Channel (
	 ChannelID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL
	
	,EntityID INTEGER NOT NULL
	,DistributorID INTEGER NOT NULL

	,Name TEXT NOT NULL
	,Description TEXT
	,CreatedDate TIMESTAMP WITH TIME ZONE NOT NULL CONSTRAINT DfChannelCreated DEFAULT CURRENT_TIMESTAMP
	,UpdatedDate TIMESTAMP WITH TIME ZONE NOT NULL CONSTRAINT DfChannelUpdated DEFAULT CURRENT_TIMESTAMP
	,Status CHAR(1) NOT NULL CONSTRAINT DfChannelStatus DEFAULT 'A' -- [A]ctive, [I]nactive, [F]aulted

	,Data BYTEA NOT NULL
	,Metadata BYTEA NOT NULL

	,CONSTRAINT PkChannel PRIMARY KEY (ChannelID)
);

CREATE TABLE IF NOT EXISTS herald.Culture (
	 CultureID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL

	,Name TEXT NOT NULL

	,CONSTRAINT PkCulture PRIMARY KEY (CultureID)
);

CREATE UNIQUE INDEX IF NOT EXISTS UqCultureName ON herald.Culture (Name);

CREATE TABLE IF NOT EXISTS herald.CultureParent (
	 CultureID INTEGER NOT NULL
	,ParentCultureID INTEGER NOT NULL

	,CONSTRAINT PkCultureParent PRIMARY KEY (CultureID, ParentCultureID)
);

CREATE TABLE IF NOT EXISTS herald.Distribution (
	 DistributionID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL

	,DistributorID INTEGER NOT NULL
	,Name TEXT NOT NULL

	,CONSTRAINT PkDistribution PRIMARY KEY (DistributionID)
);

CREATE UNIQUE INDEX IF NOT EXISTS UqDistributionName ON herald.Distribution (Name);

CREATE TABLE IF NOT EXISTS herald.Distributor (
	 DistributorID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL

	,Name TEXT NOT NULL

	,CONSTRAINT PkDistributor PRIMARY KEY (DistributorID)
);

CREATE UNIQUE INDEX IF NOT EXISTS UqDistributorName ON herald.Distributor (Name);

CREATE TABLE IF NOT EXISTS herald.Entity (
	 EntityID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL

	,Name TEXT NOT NULL

	,CONSTRAINT PkEntity PRIMARY KEY (EntityID)
);

CREATE UNIQUE INDEX IF NOT EXISTS UqEntityName ON herald.Entity (Name);

CREATE TABLE IF NOT EXISTS herald.Template (
	 CategoryID INTEGER
	,DistributionID INTEGER
	,CultureID INTEGER

	,CreatedDate TIMESTAMP WITH TIME ZONE NOT NULL CONSTRAINT DfTemplateCreated DEFAULT CURRENT_TIMESTAMP
	,UpdatedDate TIMESTAMP WITH TIME ZONE NOT NULL CONSTRAINT DfTemplateUpdated DEFAULT CURRENT_TIMESTAMP

	,Data BYTEA NOT NULL

	,CONSTRAINT PkTemplate PRIMARY KEY (CategoryID, DistributionID, CultureID)
);

ALTER TABLE ONLY herald.Category
	ADD CONSTRAINT FkCategoryApplication FOREIGN KEY (ApplicationID) REFERENCES herald.Application (ApplicationID);

ALTER TABLE ONLY herald.Channel
	ADD CONSTRAINT FkChannelDistributor FOREIGN KEY (DistributorID) REFERENCES herald.Distributor (DistributorID);

ALTER TABLE ONLY herald.Channel
	ADD CONSTRAINT FkChannelEntity FOREIGN KEY (EntityID) REFERENCES herald.Entity (EntityID);

ALTER TABLE ONLY herald.CultureParent
	ADD CONSTRAINT FkCultureParentCulture FOREIGN KEY (CultureID) REFERENCES herald.Culture (CultureID);

ALTER TABLE ONLY herald.CultureParent
	ADD CONSTRAINT FkCultureParentParentCulture FOREIGN KEY (ParentCultureID) REFERENCES herald.Culture (CultureID);

ALTER TABLE ONLY herald.Distribution
	ADD CONSTRAINT FkDistributionDistributor FOREIGN KEY (DistributorID) REFERENCES herald.Distributor (DistributorID);

ALTER TABLE ONLY herald.Template
	ADD CONSTRAINT FkTemplateCategory FOREIGN KEY (CategoryID) REFERENCES herald.Category (CategoryID);

ALTER TABLE ONLY herald.Template
	ADD CONSTRAINT FkTemplateCulture FOREIGN KEY (CultureID) REFERENCES herald.Culture (CultureID);

ALTER TABLE ONLY herald.Template
	ADD CONSTRAINT FkTemplateDistribution FOREIGN KEY (DistributionID) REFERENCES herald.Distribution (DistributionID);

CREATE OR REPLACE VIEW herald.TemplateDetails AS
	SELECT  ApplicationID, AP.Name AS ApplicationName, CategoryID, CA.Name AS CategoryName, CA.Description, DistributionID, DI.Name AS DistributionName, TE.Data
	FROM    herald.Template TE
			JOIN herald.Category CA USING (CategoryID)
			JOIN herald.Application AP USING (ApplicationID)
			JOIN herald.Distribution DI USING (DistributionID);

CREATE OR REPLACE FUNCTION herald.ApplicationDelete (_applicationId INTEGER) RETURNS VOID AS $$
BEGIN
	DELETE
	FROM	herald.Template
	WHERE	CategoryID IN (SELECT CategoryID FROM herald.Category WHERE ApplicationID = _applicationId);

	DELETE
	FROM    herald.Category
	WHERE   ApplicationID = _applicationId;
	
	DELETE
	FROM    herald.Application
	WHERE   ApplicationID = _applicationId;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.ApplicationGetByName (_name TEXT) RETURNS INTEGER AS $$
DECLARE
	_ApplicationID INTEGER;
BEGIN
	SELECT	EN.ApplicationID INTO _ApplicationID
	FROM	herald.Application EN
	WHERE	EN.Name = _name;

	RETURN _ApplicationID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.ApplicationGetOrCreate (_name TEXT) RETURNS INTEGER AS $$
DECLARE
	_ApplicationID INTEGER;
BEGIN
	LOOP
		SELECT	EN.ApplicationID INTO _ApplicationID
		FROM	herald.Application EN
		WHERE	EN.Name = _name;

		EXIT WHEN FOUND;
		
		INSERT INTO herald.Application (Name)
		VALUES      (_name)
		ON CONFLICT DO NOTHING
		RETURNING ApplicationID INTO _ApplicationID;

		EXIT WHEN FOUND;
	END LOOP;

	RETURN _ApplicationID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.ApplicationList (_offset INTEGER, _count INTEGER) RETURNS TABLE (
	 ApplicationID INTEGER
	,Name TEXT
	) AS $$
BEGIN
	RETURN QUERY
	SELECT  AP.ApplicationID, AP.Name
	FROM    herald.Application AP
	ORDER BY AP.ApplicationID
	OFFSET _offset ROWS
	FETCH FIRST (_count) ROWS ONLY;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.CategoryCreate (_applicationID INTEGER, _name TEXT, _description TEXT) RETURNS INTEGER AS $$
DECLARE
	_CategoryID INTEGER;
BEGIN
	INSERT INTO herald.Category (ApplicationID, Name, Description)
		VALUES (_applicationId, _name, _description)
		RETURNING CategoryID INTO _CategoryID;

	RETURN _CategoryID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.CategoryDelete (_applicationId INTEGER, _name TEXT) RETURNS VOID AS $$
DECLARE
	_CategoryID INTEGER;
BEGIN
	SELECT	CA.CategoryID INTO _CategoryID
	FROM	herald.Category CA
	WHERE	CA.ApplicationID = _applicationId AND CA.Name = _type;

	IF _CategoryID IS NULL THEN
		RETURN;
	END IF;

	DELETE
	FROM	herald.Template
	WHERE	CategoryID = _CategoryID;

	DELETE
	FROM    herald.Category
	WHERE   CategoryID = _CategoryID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.CategoryGetByName (_applicationId INTEGER, _name TEXT)
	RETURNS TABLE (
		 CategoryID INTEGER
		,Name TEXT
		,Description TEXT
	) AS $$
DECLARE
	_DistributorID INTEGER;
BEGIN
	RETURN QUERY
	SELECT	CA.CategoryID, CA.Name, CA.Description
	FROM	herald.Category CA
	WHERE	CA.ApplicationID = _applicationId AND CA.Name = _name;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.CategoryList (_applicationId INTEGER, _offset INTEGER, _count INTEGER)
	RETURNS TABLE (
		 CategoryID INTEGER
		,Name TEXT
		,Description TEXT
	) AS $$
DECLARE
	_DistributorID INTEGER;
BEGIN
	RETURN QUERY
	SELECT	CA.CategoryID, CA.Name, CA.Description
	FROM	herald.Category CA
	WHERE	CA.ApplicationID = _applicationId AND CA.Name = _name
	ORDER BY CA.CategoryID
	OFFSET _offset ROWS
	FETCH FIRST (_count) ROWS ONLY;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.ChannelCreate (_entityId INTEGER, _type TEXT, _name TEXT, _description TEXT, _data BYTEA, _metadata BYTEA) RETURNS BIGINT AS $$
DECLARE
	_DistributorID INTEGER;
	_ChannelID BIGINT;
BEGIN
	SELECT	DI.DistributorID INTO _DistributorID
	FROM	herald.Distributor DI
	WHERE	DI.Name = _type;

	IF _DistributorID IS NULL THEN
		RETURN NULL;
	END IF;

	INSERT INTO herald.Channel (EntityID, DistributorID, Name, Description, Data, Metadata)
		VALUES (_entityId, _DistributorID, _name, _description, _data, _metadata)
		RETURNING ChannelID INTO _ChannelID;

	RETURN _ChannelID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.ChannelGetById (_channelId BIGINT) RETURNS TABLE (
	 EntityName TEXT
	,ChannelID BIGINT
	,Type TEXT
	,Name TEXT
	,Description TEXT
	,Status CHAR(1)
	,Data BYTEA
	,Metadata BYTEA
	) AS $$
BEGIN
	RETURN QUERY
	SELECT	EN.Name, CH.ChannelID, DI.Name, CH.Name, CH.Description, CH.Status, CH.Data, CH.Metadata
	FROM	herald.Channel CH
			JOIN herald.Entity EN USING (EntityID)
			JOIN herald.Distributor DI USING (DistributorID)
	WHERE	CH.ChannelID = _channelId;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.ChannelList (_entityId INTEGER, _type TEXT, _offset INTEGER, _count INTEGER) RETURNS TABLE (
	 ChannelID BIGINT
	,Type TEXT
	,Name TEXT
	,Description TEXT
	,Status CHAR(1)
	,Metadata BYTEA
	) AS $$
BEGIN
	RETURN QUERY
	SELECT  CH.ChannelID, DI.Name, CH.Name, CH.Description, CH.Status, CH.Metadata
	FROM    herald.Channel CH
			JOIN herald.Distributor DI USING (DistributorID)
	WHERE	CH.EntityID = _entityId AND (_type IS NULL OR DI.Name = _type)
	ORDER BY CH.ChannelID
	OFFSET _offset ROWS
	FETCH FIRST (_count) ROWS ONLY;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.ChannelRemove (_channelId BIGINT) RETURNS VOID AS $$
BEGIN
	DELETE
	FROM    herald.Channel
	WHERE   ChannelID = _channelId;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.ChannelUpdate(_channelId BIGINT, _type TEXT, _name TEXT, _description TEXT, _data BYTEA, _metadata BYTEA) RETURNS TEXT AS $$
DECLARE
	_EntityName TEXT;
BEGIN
	SELECT  EN.Name INTO _EntityName
	FROM    herald.Channel CH
			JOIN herald.Entity EN USING (EntityID)
			JOIN herald.Distributor DI USING (DistributorID)
	WHERE   CH.ChannelID = _channelId AND DI.Name = _type;

	IF _EntityName IS NULL THEN
		RETURN NULL;
	END IF;

	UPDATE  herald.Channel
	SET     Name = _name, Description = _description, Data = _data, Metadata = _metadata
	WHERE   ChannelID = _channelId;

	RETURN _EntityName;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.ChannelUpdateStatus (_channelId BIGINT, _status CHAR(1)) RETURNS BOOLEAN AS $$
BEGIN
	UPDATE  herald.Channel
	SET     Status = _status
	WHERE   ChannelID = _channelId;

	RETURN FOUND;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.CultureGetRelevant(_name TEXT)
	RETURNS TABLE (
		 CultureID INTEGER
		,Priority INTEGER
	) AS $$
BEGIN
	-- Returns the desired culture as Priority 1, with parent cultures in ascending priority after
	RETURN QUERY
	WITH RECURSIVE Cultures(CultureID, Priority) AS (
		SELECT  CU.CultureID, 1
		FROM    herald.Culture CU
		WHERE   CU.Name = _name
		UNION ALL
		SELECT  CP.ParentCultureID, CU.Priority + 1
		FROM    herald.CultureParent CP, Cultures CU
		WHERE   CU.CultureID = CP.CultureID
	)
	SELECT  CS.CultureID, CS.Priority
	FROM    Cultures CS;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.DistributionCreate (_distributorID INTEGER, _name TEXT) RETURNS INTEGER AS $$
DECLARE
	_DistributionID INTEGER;
BEGIN
	INSERT INTO herald.Distribution (DistributorID, Name)
		VALUES (_distributorID, _name)
		RETURNING DistributionID INTO _DistributionID;

	RETURN _DistributionID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.DistributionGetByName (_name TEXT) RETURNS INTEGER AS $$
DECLARE
	_DistributionID INTEGER;
BEGIN
	SELECT	EN.DistributionID INTO _DistributionID
	FROM	herald.Distribution EN
	WHERE	EN.Name = _name;

	RETURN _DistributionID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.DistributionList () RETURNS TABLE (
	 DistributionID INTEGER
	,Name TEXT
	) AS $$
BEGIN
	RETURN QUERY
	SELECT  DI.DistributionID, DI.Name
	FROM    herald.Distribution DI
	ORDER BY DI.DistributionID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.DistributorGetByName (_name TEXT) RETURNS INTEGER AS $$
DECLARE
	_DistributorID INTEGER;
BEGIN
	SELECT	EN.DistributorID INTO _DistributorID
	FROM	herald.Distributor EN
	WHERE	EN.Name = _name;

	RETURN _DistributorID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.DistributorGetOrCreate (_name TEXT) RETURNS INTEGER AS $$
DECLARE
	_DistributorID INTEGER;
BEGIN
	LOOP
		SELECT	EN.DistributorID INTO _DistributorID
		FROM	herald.Distributor EN
		WHERE	EN.Name = _name;

		EXIT WHEN FOUND;
		
		INSERT INTO herald.Distributor (Name)
		VALUES      (_name)
		ON CONFLICT DO NOTHING
		RETURNING DistributorID INTO _DistributorID;

		EXIT WHEN FOUND;
	END LOOP;

	RETURN _DistributorID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.DistributorList () RETURNS TABLE (
	 DistributorID INTEGER
	,Name TEXT
	) AS $$
BEGIN
	RETURN QUERY
	SELECT  DI.DistributorID, DI.Name
	FROM    herald.Distributor DI
	ORDER BY DI.DistributorID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.EntityGetByName (_name TEXT) RETURNS INTEGER AS $$
DECLARE
	_EntityID INTEGER;
BEGIN
	SELECT	EN.EntityID INTO _EntityID
	FROM	herald.Entity EN
	WHERE	EN.Name = _name;

	RETURN _EntityID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.EntityGetOrCreate (_name TEXT) RETURNS INTEGER AS $$
DECLARE
	_EntityID INTEGER;
BEGIN
	LOOP
		SELECT	EN.EntityID INTO _EntityID
		FROM	herald.Entity EN
		WHERE	EN.Name = _name;

		EXIT WHEN FOUND;
		
		INSERT INTO herald.Entity (Name)
		VALUES      (_name)
		ON CONFLICT DO NOTHING
		RETURNING EntityID INTO _EntityID;

		EXIT WHEN FOUND;
	END LOOP;

	RETURN _EntityID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.TemplateCreate (_applicationId INTEGER, _category TEXT, _distribution TEXT, _culture TEXT, _data BYTEA) RETURNS INTEGER AS $$
DECLARE
	_CategoryID INTEGER;
	_CultureID INTEGER;
	_DistributionID INTEGER;
BEGIN
	SELECT	CA.CategoryID INTO _CategoryID
	FROM	herald.Category CA
	WHERE	CA.ApplicationID = _applicationId AND CA.Name = _category;

	IF _CategoryID IS NULL THEN
		RETURN -1;
	END IF;

	SELECT	CU.CultureID INTO _CultureID
	FROM	herald.Culture CU
	WHERE	CU.Name = _culture;

	IF _CultureID IS NULL THEN
		RETURN -2;
	END IF;

	SELECT	DI.DistributionID INTO _DistributionID
	FROM	herald.Distribution DI
	WHERE	DI.Name = _distribution;

	IF _DistributionID IS NULL THEN
		RETURN -3;
	END IF;

	INSERT INTO herald.Template (CategoryID, DistributionID, CultureID, Data)
		VALUES (_CategoryID, _DistributionID, _CultureID, _Data);

	RETURN 1;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.TemplateDelete (_applicationId INTEGER, _category TEXT, _distribution TEXT, _culture TEXT) RETURNS BOOLEAN AS $$
DECLARE
	_CategoryID INTEGER;
	_CultureID INTEGER;
	_DistributionID INTEGER;
BEGIN
	SELECT	CA.CategoryID INTO _CategoryID
	FROM	herald.Category CA
	WHERE	CA.ApplicationID = _applicationId AND CA.Name = _category;

	IF _CategoryID IS NULL THEN
		RETURN FALSE;
	END IF;

	SELECT	CU.CultureID INTO _CultureID
	FROM	herald.Culture CU
	WHERE	CU.Name = _culture;

	IF _CultureID IS NULL THEN
		RETURN FALSE;
	END IF;

	SELECT	DI.DistributionID INTO _DistributionID
	FROM	herald.Distribution DI
	WHERE	DI.Name = _distribution;

	IF _DistributionID IS NULL THEN
		RETURN FALSE;
	END IF;

	DELETE
	FROM    herald.Template
	WHERE   CategoryID = _CategoryID AND DistributionID = _DistributionID AND CultureID = _CultureID;
	
	RETURN FOUND;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.TemplateGet(_applicationID INTEGER, _category TEXT, _distribution TEXT, _culture TEXT)
	RETURNS TABLE (
		 Name TEXT
		,Description TEXT
		,Category TEXT
		,Distribution TEXT
		,Culture TEXT
	) AS $$
BEGIN
	RETURN QUERY
	SELECT	TE.Name, TE.Description, CA.Name, DI.Name, CU.Name
	FROM    herald.Template TE
			JOIN herald.Category CA USING (CategoryID)
			JOIN herald.Distribution DI USING (DistributionID)
			JOIN herald.Culture CU USING (CultureID)
	WHERE   CA.ApplicationID = _applicationID AND CA.Name = _category AND DI.Name = _distribution AND CU.Name = _culture;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.TemplateGetData(_applicationID INTEGER, _category TEXT, _distribution TEXT, _culture TEXT)
	RETURNS TABLE (
		 Data BYTEA
		,Culture TEXT
	) AS $$
BEGIN
	RETURN QUERY
	SELECT	TE.Data, CU.Name
	FROM    herald.Template TE
			JOIN herald.Category CA USING (CategoryID)
			JOIN herald.Distribution DI USING (DistributionID)
			JOIN herald.CultureGetRelevant(_culture) CR USING (CultureID)
			JOIN herald.Culture CU USING (CultureID)
	WHERE   CA.ApplicationID = _applicationID AND CA.Name = _category AND DI.Name = _distribution
	ORDER BY CR.Priority
	FETCH FIRST 1 ROW ONLY;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.TemplateList(_applicationID INTEGER, _category TEXT, _distribution TEXT, _culture TEXT, _offset INTEGER, _count INTEGER)
	RETURNS TABLE (
		 Name TEXT
		,Description TEXT
		,Category TEXT
		,Distributor TEXT
		,Culture TEXT
	) AS $$
BEGIN
	RETURN QUERY
	SELECT	TE.Name, TE.Description, CA.Name, DI.Name, CU.Name
	FROM    herald.Template TE
			JOIN herald.Category CA USING (CategoryID)
			JOIN herald.Distribution DI USING (DistributionID)
			JOIN herald.Culture CU USING (CultureID)
	WHERE   CA.ApplicationID = _applicationID AND CA.Name = _category AND DI.Name = _distribution AND CU.Name = _culture
	ORDER BY TE.CategoryID, TE.DistributionID, TE.CultureID
	OFFSET _offset ROWS
	FETCH FIRST (_count) ROWS ONLY;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION herald.TemplateUpdate (_applicationId INTEGER, _category TEXT, _distribution TEXT, _culture TEXT, _data BYTEA) RETURNS BOOLEAN AS $$
DECLARE
	_CategoryID INTEGER;
	_CultureID INTEGER;
	_DistributionID INTEGER;
BEGIN
	SELECT	CA.CategoryID INTO _CategoryID
	FROM	herald.Category CA
	WHERE	CA.ApplicationID = _applicationId AND CA.Name = _category;

	IF _CategoryID IS NULL THEN
		RETURN FALSE;
	END IF;

	SELECT	CU.CultureID INTO _CultureID
	FROM	herald.Culture CU
	WHERE	CU.Name = _culture;

	IF _CultureID IS NULL THEN
		RETURN FALSE;
	END IF;

	SELECT	DI.DistributionID INTO _DistributionID
	FROM	herald.Distribution DI
	WHERE	DI.Name = _distribution;

	IF _DistributionID IS NULL THEN
		RETURN FALSE;
	END IF;

	UPDATE  herald.Template
	SET     Data = _data
	WHERE   CategoryID = _CategoryID AND DistributionID = _DistributionID AND CultureID = _CultureID;
	
	RETURN FOUND;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMIT TRANSACTION;
