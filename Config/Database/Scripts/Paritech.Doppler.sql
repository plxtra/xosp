BEGIN TRANSACTION;
CREATE SCHEMA doppler;

CREATE TABLE doppler.Entity (
	 EntityID INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL

	,Name TEXT NOT NULL

	,CONSTRAINT PkEntity PRIMARY KEY (EntityID)
);

CREATE UNIQUE INDEX UqEntityName ON doppler.Entity (Name);

CREATE TABLE doppler.Scan (
	 ScanID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL

	,EntityID INTEGER NOT NULL
	,Type TEXT NOT NULL

	,Name TEXT NOT NULL
	,Description TEXT
	,CreatedDate TIMESTAMP WITH TIME ZONE NOT NULL CONSTRAINT DfScanCreated DEFAULT CURRENT_TIMESTAMP
	,UpdatedDate TIMESTAMP WITH TIME ZONE NOT NULL CONSTRAINT DfScanUpdated DEFAULT CURRENT_TIMESTAMP
	,Status CHAR(1) NOT NULL CONSTRAINT DfScanStatus DEFAULT 'A' -- [A]ctive, [I]nactive, [F]aulted

	,Data BYTEA NOT NULL
	,Metadata BYTEA NOT NULL
	,State BYTEA

	,CONSTRAINT PkScan PRIMARY KEY (ScanID)
);


ALTER TABLE ONLY doppler.Scan
	ADD CONSTRAINT FkScanEntity FOREIGN KEY (EntityID) REFERENCES doppler.Entity (EntityID);

CREATE OR REPLACE FUNCTION doppler.EntityGetByName (_name TEXT) RETURNS INT AS $$
DECLARE
	_EntityID INTEGER;
BEGIN
	SELECT	EN.EntityID INTO _EntityID
	FROM	doppler.Entity EN
	WHERE	EN.Name = _name;

	RETURN _EntityID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION doppler.EntityGetOrCreate (_name TEXT) RETURNS INT AS $$
DECLARE
	_EntityID INTEGER;
BEGIN
	LOOP
		SELECT	EN.EntityID INTO _EntityID
		FROM	doppler.Entity EN
		WHERE	EN.Name = _name;

		EXIT WHEN FOUND;
		
		INSERT INTO doppler.Entity (Name)
		VALUES      (_name)
		ON CONFLICT DO NOTHING
		RETURNING EntityID INTO _EntityID;

		EXIT WHEN FOUND;
	END LOOP;

	RETURN _EntityID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION doppler.ScanCreate (_entityId INTEGER, _type TEXT, _name TEXT, _description TEXT, _status CHAR(1), _data BYTEA, _metadata BYTEA) RETURNS BIGINT AS $$
DECLARE
	_ScanID BIGINT;
BEGIN
	INSERT INTO doppler.Scan (EntityID, Type, Name, Description, Status, Data, Metadata)
		VALUES (_entityId, _type, _name, _description, _status, _data, _metadata)
		RETURNING ScanID INTO _ScanID;

	RETURN _ScanID;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION doppler.ScanGetAllActive () RETURNS TABLE (
	 EntityName TEXT
	,ScanID BIGINT
	,Type TEXT
	,Name TEXT
	,Description TEXT
	,Status CHAR(1)
	,Data BYTEA
	,Metadata BYTEA
	,State BYTEA
	) AS $$
BEGIN
	RETURN QUERY
	SELECT	EN.Name, SC.ScanID, SC.Type, SC.Name, SC.Description, SC.Status, SC.Data, SC.Metadata, SC.State
	FROM	doppler.Scan SC
			JOIN doppler.Entity EN USING (EntityID)
	WHERE	SC.Status = 'A';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION doppler.ScanGetById (_scanId BIGINT) RETURNS TABLE (
	 EntityName TEXT
	,ScanID BIGINT
	,Type TEXT
	,Name TEXT
	,Description TEXT
	,Status CHAR(1)
	,Data BYTEA
	,Metadata BYTEA
	) AS $$
BEGIN
	RETURN QUERY
	SELECT	EN.Name, SC.ScanID, SC.Type, SC.Name, SC.Description, SC.Status, SC.Data, SC.Metadata
	FROM	doppler.Scan SC
			JOIN doppler.Entity EN USING (EntityID)
	WHERE	SC.ScanID = _scanId;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION doppler.ScanGetFullById (_scanId BIGINT) RETURNS TABLE (
	 EntityName TEXT
	,Type TEXT
	,Name TEXT
	,Description TEXT
	,Status CHAR(1)
	,Data BYTEA
	,Metadata BYTEA
	,State BYTEA
	) AS $$
BEGIN
	RETURN QUERY
	SELECT	EN.Name, SC.Type, SC.Name, SC.Description, SC.Status, SC.Data, SC.Metadata, SC.State
	FROM	doppler.Scan SC
			JOIN doppler.Entity EN USING (EntityID)
	WHERE	SC.ScanID = _scanId;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION doppler.ScanList (_entityId INTEGER, _type TEXT, _offset INTEGER, _count INTEGER) RETURNS TABLE (
	 ScanID BIGINT
	,Type TEXT
	,Name TEXT
	,Description TEXT
	,Status CHAR(1)
	,Metadata BYTEA
	) AS $$
BEGIN
	RETURN QUERY
	SELECT	SC.ScanID, SC.Type, SC.Name, SC.Description, SC.Status, SC.Metadata
	FROM	doppler.Scan SC
	WHERE	SC.EntityID = _entityId AND (_type IS NULL OR SC.Type = _type)
	ORDER BY SC.ScanID
	OFFSET _offset ROWS
	FETCH FIRST (_count) ROWS ONLY;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION doppler.ScanRemove (_scanId BIGINT) RETURNS VOID AS $$
BEGIN
	DELETE
	FROM    doppler.Scan
	WHERE   ScanID = _scanId;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION doppler.ScanUpdate(_scanId BIGINT, _type TEXT, _name TEXT, _description TEXT, _status CHAR(1), _data BYTEA, _metadata BYTEA) RETURNS TEXT AS $$
DECLARE
	_EntityName TEXT;
BEGIN
	SELECT	EN.Name INTO _EntityName
	FROM	doppler.Scan SC
			JOIN doppler.Entity EN USING (EntityID)
	WHERE	SC.ScanID = _scanId AND SC.Type = _type;

	IF _EntityName IS NULL THEN
		RETURN NULL;
	END IF;

	UPDATE doppler.Scan
	SET 	Name = _name, Description = _description, Data = _data, Metadata = _metadata, Status = _status
	WHERE	ScanID = _scanId;

	RETURN _EntityName;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION doppler.ScanUpdateState(_scanId BIGINT, _state BYTEA) RETURNS BOOLEAN AS $$
BEGIN
	UPDATE	doppler.Scan
	SET 	State = _state
	WHERE	ScanID = _scanId;

	RETURN FOUND;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION doppler.ScanUpdateStatus(_scanId BIGINT, _status CHAR(1)) RETURNS BOOLEAN AS $$
BEGIN
	UPDATE	doppler.Scan
	SET 	Status = _status
	WHERE	ScanID = _scanId;

	RETURN FOUND;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMIT TRANSACTION;
